// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ICSdkEKYC
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import Compression
import CoreFoundation
import CoreGraphics
import CoreText
import CryptoKit
import Darwin
import DeveloperToolsSupport
import Foundation
@_exported import ICSdkEKYC
import MachO
import ObjectiveC
import QuartzCore
import Security
import Swift
import SwiftUI
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AnimatedSwitch : ICSdkEKYC.AnimatedControl {
  @_Concurrency.MainActor @preconcurrency override public init(animation: ICSdkEKYC.LottieAnimation?, configuration: ICSdkEKYC.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override open func animationDidSet()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  public enum CancelBehavior {
    case reverse
    case none
    public static func == (a: ICSdkEKYC.AnimatedSwitch.CancelBehavior, b: ICSdkEKYC.AnimatedSwitch.CancelBehavior) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var cancelBehavior: ICSdkEKYC.AnimatedSwitch.CancelBehavior
  @_Concurrency.MainActor @preconcurrency public var animateUpdateWhenChangingAnimation: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var stateUpdated: ((_ isOn: Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var isOn: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setIsOn(_ isOn: Swift.Bool, animated: Swift.Bool, shouldFireHaptics: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func setProgressForState(fromProgress: ICSdkEKYC.AnimationProgressTime, toProgress: ICSdkEKYC.AnimationProgressTime, forOnState: Swift.Bool)
  @objc deinit
}
public enum LottiePlaybackMode : Swift.Hashable {
  case paused(at: ICSdkEKYC.LottiePlaybackMode.PausedState)
  case playing(_: ICSdkEKYC.LottiePlaybackMode.PlaybackMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case progress(_: ICSdkEKYC.AnimationProgressTime)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case frame(_: ICSdkEKYC.AnimationFrameTime)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case time(_: Foundation.TimeInterval)
  @available(*, deprecated, renamed: "LottiePlaybackMode.paused(at:)", message: "Will be removed in a future major release.")
  case pause
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromProgress(_: ICSdkEKYC.AnimationProgressTime?, toProgress: ICSdkEKYC.AnimationProgressTime, loopMode: ICSdkEKYC.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromFrame(_: ICSdkEKYC.AnimationFrameTime?, toFrame: ICSdkEKYC.AnimationFrameTime, loopMode: ICSdkEKYC.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case fromMarker(_: Swift.String?, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ICSdkEKYC.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case marker(_: Swift.String, loopMode: ICSdkEKYC.LottieLoopMode)
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  case markers(_: [Swift.String])
  public enum PausedState : Swift.Hashable {
    case currentFrame
    case progress(_: ICSdkEKYC.AnimationProgressTime)
    case frame(_: ICSdkEKYC.AnimationFrameTime)
    case time(_: Foundation.TimeInterval)
    case marker(_: Swift.String, position: ICSdkEKYC.LottieMarkerPosition = .start)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: ICSdkEKYC.LottiePlaybackMode.PausedState, b: ICSdkEKYC.LottiePlaybackMode.PausedState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PlaybackMode : Swift.Hashable {
    case fromProgress(_: ICSdkEKYC.AnimationProgressTime?, toProgress: ICSdkEKYC.AnimationProgressTime, loopMode: ICSdkEKYC.LottieLoopMode)
    case fromFrame(_: ICSdkEKYC.AnimationFrameTime?, toFrame: ICSdkEKYC.AnimationFrameTime, loopMode: ICSdkEKYC.LottieLoopMode)
    case fromMarker(_: Swift.String?, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ICSdkEKYC.LottieLoopMode)
    case marker(_: Swift.String, loopMode: ICSdkEKYC.LottieLoopMode)
    case markers(_: [Swift.String])
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: ICSdkEKYC.LottiePlaybackMode.PlaybackMode, b: ICSdkEKYC.LottiePlaybackMode.PlaybackMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICSdkEKYC.LottiePlaybackMode, b: ICSdkEKYC.LottiePlaybackMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ICSdkEKYC.LottiePlaybackMode {
  public static var paused: ICSdkEKYC.LottiePlaybackMode {
    get
  }
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toProgress(_ toProgress: ICSdkEKYC.AnimationProgressTime, loopMode: ICSdkEKYC.LottieLoopMode) -> ICSdkEKYC.LottiePlaybackMode
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toFrame(_ toFrame: ICSdkEKYC.AnimationFrameTime, loopMode: ICSdkEKYC.LottieLoopMode) -> ICSdkEKYC.LottiePlaybackMode
  @available(*, deprecated, renamed: "LottiePlaybackMode.playing(_:)", message: "Will be removed in a future major release.")
  public static func toMarker(_ toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ICSdkEKYC.LottieLoopMode) -> ICSdkEKYC.LottiePlaybackMode
}
extension ICSdkEKYC.LottiePlaybackMode.PlaybackMode {
  public static func toProgress(_ toProgress: ICSdkEKYC.AnimationProgressTime, loopMode: ICSdkEKYC.LottieLoopMode) -> ICSdkEKYC.LottiePlaybackMode.PlaybackMode
  public static func toFrame(_ toFrame: ICSdkEKYC.AnimationFrameTime, loopMode: ICSdkEKYC.LottieLoopMode) -> ICSdkEKYC.LottiePlaybackMode.PlaybackMode
  public static func toMarker(_ toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ICSdkEKYC.LottieLoopMode) -> ICSdkEKYC.LottiePlaybackMode.PlaybackMode
}
public enum LottieMarkerPosition : Swift.Hashable {
  case start
  case end
  public static func == (a: ICSdkEKYC.LottieMarkerPosition, b: ICSdkEKYC.LottieMarkerPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieBackgroundBehavior {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  case continuePlaying
  public static func `default`(for renderingEngine: ICSdkEKYC.RenderingEngine) -> ICSdkEKYC.LottieBackgroundBehavior
  public static func == (a: ICSdkEKYC.LottieBackgroundBehavior, b: ICSdkEKYC.LottieBackgroundBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieLoopMode : Swift.Hashable {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ICSdkEKYC.LottieLoopMode : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.LottieLoopMode, rhs: ICSdkEKYC.LottieLoopMode) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class LottieAnimationView : ICSdkEKYC.LottieAnimationViewBase {
  @_Concurrency.MainActor @preconcurrency public init(animation: ICSdkEKYC.LottieAnimation?, imageProvider: (any ICSdkEKYC.AnimationImageProvider)? = nil, textProvider: any ICSdkEKYC.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any ICSdkEKYC.AnimationFontProvider = DefaultFontProvider(), configuration: ICSdkEKYC.LottieConfiguration = .shared, logger: ICSdkEKYC.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency public init(dotLottie: ICSdkEKYC.DotLottieFile?, animationId: Swift.String? = nil, textProvider: any ICSdkEKYC.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any ICSdkEKYC.AnimationFontProvider = DefaultFontProvider(), configuration: ICSdkEKYC.LottieConfiguration = .shared, logger: ICSdkEKYC.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency public init(configuration: ICSdkEKYC.LottieConfiguration = .shared, logger: ICSdkEKYC.LottieLogger = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func play(_ mode: ICSdkEKYC.LottiePlaybackMode.PlaybackMode, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromProgress: ICSdkEKYC.AnimationProgressTime? = nil, toProgress: ICSdkEKYC.AnimationProgressTime, loopMode: ICSdkEKYC.LottieLoopMode? = nil, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromFrame: ICSdkEKYC.AnimationFrameTime? = nil, toFrame: ICSdkEKYC.AnimationFrameTime, loopMode: ICSdkEKYC.LottieLoopMode? = nil, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ICSdkEKYC.LottieLoopMode? = nil, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(marker: Swift.String, loopMode: ICSdkEKYC.LottieLoopMode? = nil, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func play(markers: [Swift.String], completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func stop()
  @_Concurrency.MainActor @preconcurrency open func pause()
  @available(*, deprecated, renamed: "setPlaybackMode(_:completion:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency open func play(_ playbackMode: ICSdkEKYC.LottiePlaybackMode, animationCompletionHandler: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency open func setPlaybackMode(_ playbackMode: ICSdkEKYC.LottiePlaybackMode, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor @preconcurrency public var animateLayoutChangesWithCurrentCoreAnimationContext: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var configuration: ICSdkEKYC.LottieConfiguration {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var valueProviders: [ICSdkEKYC.AnimationKeypath : any ICSdkEKYC.AnyValueProvider] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var backgroundBehavior: ICSdkEKYC.LottieBackgroundBehavior {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animation: ICSdkEKYC.LottieAnimation? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animationLoaded: ((_ animationView: ICSdkEKYC.LottieAnimationView, _ animation: ICSdkEKYC.LottieAnimation) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var imageProvider: any ICSdkEKYC.AnimationImageProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textProvider: any ICSdkEKYC.AnimationKeypathTextProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var fontProvider: any ICSdkEKYC.AnimationFontProvider {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var maskAnimationToBounds: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isAnimationPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isAnimationQueued: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var loopMode: ICSdkEKYC.LottieLoopMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentProgress: ICSdkEKYC.AnimationProgressTime {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentFrame: ICSdkEKYC.AnimationFrameTime {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var realtimeAnimationFrame: ICSdkEKYC.AnimationFrameTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var realtimeAnimationProgress: ICSdkEKYC.AnimationProgressTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var viewportFrame: CoreFoundation.CGRect? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public var currentRenderingEngine: ICSdkEKYC.RenderingEngine? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var currentPlaybackMode: ICSdkEKYC.LottiePlaybackMode? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var mainThreadRenderingEngineShouldForceDisplayUpdateOnEachFrame: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func loadAnimation(_ animationId: Swift.String? = nil, from dotLottieFile: ICSdkEKYC.DotLottieFile)
  @_Concurrency.MainActor @preconcurrency public func loadAnimation(atIndex index: Swift.Int, from dotLottieFile: ICSdkEKYC.DotLottieFile)
  @_Concurrency.MainActor @preconcurrency public func reloadImages()
  @_Concurrency.MainActor @preconcurrency public func forceDisplayUpdate()
  @_Concurrency.MainActor @preconcurrency public func setValueProvider(_ valueProvider: any ICSdkEKYC.AnyValueProvider, keypath: ICSdkEKYC.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func getValue(for keypath: ICSdkEKYC.AnimationKeypath, atFrame: ICSdkEKYC.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor @preconcurrency public func getOriginalValue(for keypath: ICSdkEKYC.AnimationKeypath, atFrame: ICSdkEKYC.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor @preconcurrency public func logHierarchyKeypaths()
  @_Concurrency.MainActor @preconcurrency public func allHierarchyKeypaths() -> [Swift.String]
  @_Concurrency.MainActor @preconcurrency public func addSubview(_ subview: ICSdkEKYC.AnimationSubview, forLayerAt keypath: ICSdkEKYC.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: ICSdkEKYC.AnimationKeypath?) -> CoreFoundation.CGRect?
  @_Concurrency.MainActor @preconcurrency public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: ICSdkEKYC.AnimationKeypath?) -> CoreFoundation.CGPoint?
  @_Concurrency.MainActor @preconcurrency public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: ICSdkEKYC.AnimationKeypath)
  @_Concurrency.MainActor @preconcurrency public func progressTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationProgressTime?
  @_Concurrency.MainActor @preconcurrency public func frameTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationFrameTime?
  @_Concurrency.MainActor @preconcurrency public func durationFrameTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationFrameTime?
  @objc deinit
}
final public class LottieLogger {
  public init(assert: @escaping ICSdkEKYC.LottieLogger.Assert = { condition, message, file, line in
       
       
       
      Swift.assert(condition(), message(), file: file, line: line)
    }, assertionFailure: @escaping ICSdkEKYC.LottieLogger.AssertionFailure = { message, file, line in
       
       
       
       
      Swift.assertionFailure(message(), file: file, line: line)
    }, warn: @escaping ICSdkEKYC.LottieLogger.Warn = { message, _, _ in
    }, info: @escaping ICSdkEKYC.LottieLogger.Info = { message in
    })
  public typealias Assert = (_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias AssertionFailure = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Warn = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Info = (_ message: @autoclosure () -> Swift.String) -> Swift.Void
  public static var shared: ICSdkEKYC.LottieLogger
  final public func assert(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func assertionFailure(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func warn(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func info(_ message: @autoclosure () -> Swift.String = String())
  @objc deinit
}
extension ICSdkEKYC.LottieLogger {
  public static var printToConsole: ICSdkEKYC.LottieLogger {
    get
  }
}
public enum LottieAnimationCache {
  public static var shared: (any ICSdkEKYC.AnimationCacheProvider)?
}
@objc public protocol QRScannerViewDelegate {
  @objc func qrScanningDidFail()
  @objc func qrScanningSucceededWithImage(_ image: UIKit.UIImage, value: Swift.String)
  @objc func qrScanningDidStop()
  @objc func qrScanningHooked()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class QRScannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any ICSdkEKYC.QRScannerViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var captureSession: AVFoundation.AVCaptureSession!
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var layer: AVFoundation.AVCaptureVideoPreviewLayer {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension ICSdkEKYC.QRScannerView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isSessionRunning: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func startScanning()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func stopScanning()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func resetDataToRescan()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func removeInputOutput()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func deallocSession()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func doInitialSetup(scanRect: CoreFoundation.CGRect)
}
extension ICSdkEKYC.QRScannerView : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension ICSdkEKYC.QRScannerView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension ICSdkEKYC.DotLottieFile {
  public enum SynchronouslyBlockingCurrentThread {
    public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache) -> Swift.Result<ICSdkEKYC.DotLottieFile, any Swift.Error>
    public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache) -> Swift.Result<ICSdkEKYC.DotLottieFile, any Swift.Error>
    public static func loadedFrom(data: Foundation.Data, filename: Swift.String) -> Swift.Result<ICSdkEKYC.DotLottieFile, any Swift.Error>
  }
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> ICSdkEKYC.DotLottieFile
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<ICSdkEKYC.DotLottieFile, any Swift.Error>) -> Swift.Void)
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> ICSdkEKYC.DotLottieFile
  public static func loadedFrom(filepath: Swift.String, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<ICSdkEKYC.DotLottieFile, any Swift.Error>) -> Swift.Void)
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func asset(named name: Swift.String, bundle: Foundation.Bundle = Bundle.main, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> ICSdkEKYC.DotLottieFile
  public static func asset(named name: Swift.String, bundle: Foundation.Bundle = Bundle.main, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<ICSdkEKYC.DotLottieFile, any Swift.Error>) -> Swift.Void)
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache) async throws -> ICSdkEKYC.DotLottieFile
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache, handleResult: @escaping (Swift.Result<ICSdkEKYC.DotLottieFile, any Swift.Error>) -> Swift.Void)
  public static func loadedFrom(data: Foundation.Data, filename: Swift.String, dispatchQueue: Dispatch.DispatchQueue = .dotLottie, handleResult: @escaping (Swift.Result<ICSdkEKYC.DotLottieFile, any Swift.Error>) -> Swift.Void)
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func loadedFrom(data: Foundation.Data, filename: Swift.String, dispatchQueue: Dispatch.DispatchQueue = .dotLottie) async throws -> ICSdkEKYC.DotLottieFile
}
extension Dispatch.DispatchQueue {
  public static let dotLottie: Dispatch.DispatchQueue
}
final public class Keyframe<T> {
  public init(_ value: T, spatialInTangent: ICSdkEKYC.LottieVector3D? = nil, spatialOutTangent: ICSdkEKYC.LottieVector3D? = nil)
  public init(value: T, time: ICSdkEKYC.AnimationFrameTime, isHold: Swift.Bool = false, inTangent: ICSdkEKYC.LottieVector2D? = nil, outTangent: ICSdkEKYC.LottieVector2D? = nil, spatialInTangent: ICSdkEKYC.LottieVector3D? = nil, spatialOutTangent: ICSdkEKYC.LottieVector3D? = nil)
  final public let value: T
  final public let time: ICSdkEKYC.AnimationFrameTime
  final public let isHold: Swift.Bool
  final public let inTangent: ICSdkEKYC.LottieVector2D?
  final public let outTangent: ICSdkEKYC.LottieVector2D?
  final public let spatialInTangent: ICSdkEKYC.LottieVector3D?
  final public let spatialOutTangent: ICSdkEKYC.LottieVector3D?
  @objc deinit
}
extension ICSdkEKYC.Keyframe : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.Keyframe<T>, rhs: ICSdkEKYC.Keyframe<T>) -> Swift.Bool
}
extension ICSdkEKYC.Keyframe : Swift.Hashable where T : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension ICSdkEKYC.Keyframe : Swift.Sendable where T : Swift.Sendable {
}
extension UIKit.UIColor {
  public var lottieColorValue: ICSdkEKYC.LottieColor {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
@_Concurrency.MainActor @preconcurrency public struct LottieButton {
  @_Concurrency.MainActor @preconcurrency public init(animation: ICSdkEKYC.LottieAnimation?, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (ICSdkEKYC.AnimatedButton) -> Swift.Void) -> ICSdkEKYC.LottieButton
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: ICSdkEKYC.LottieConfiguration) -> ICSdkEKYC.LottieButton
  @_Concurrency.MainActor @preconcurrency public func animate(fromProgress: ICSdkEKYC.AnimationProgressTime, toProgress: ICSdkEKYC.AnimationProgressTime, on event: ICSdkEKYC.LottieControlEvent) -> ICSdkEKYC.LottieButton
  @_Concurrency.MainActor @preconcurrency public func animate(fromMarker: Swift.String, toMarker: Swift.String, on event: ICSdkEKYC.LottieControlEvent) -> ICSdkEKYC.LottieButton
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: ICSdkEKYC.AnimationKeypath) -> ICSdkEKYC.LottieButton where ValueProvider : ICSdkEKYC.AnyValueProvider, ValueProvider : Swift.Equatable
  @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9ICSdkEKYC12LottieButtonV4bodyQrvp", 0) __
}
public enum ColorFormatDenominator : Swift.Hashable {
  case One
  case OneHundred
  case TwoFiftyFive
  public static func == (a: ICSdkEKYC.ColorFormatDenominator, b: ICSdkEKYC.ColorFormatDenominator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieColor : Swift.Hashable {
  public var r: Swift.Double
  public var g: Swift.Double
  public var b: Swift.Double
  public var a: Swift.Double
  public init(r: Swift.Double, g: Swift.Double, b: Swift.Double, a: Swift.Double, denominator: ICSdkEKYC.ColorFormatDenominator = .One)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICSdkEKYC.LottieColor, b: ICSdkEKYC.LottieColor) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ICSdkEKYC.LottieAnimationView {
  @_Concurrency.MainActor @preconcurrency convenience public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, imageProvider: (any ICSdkEKYC.AnimationImageProvider)? = nil, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: ICSdkEKYC.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(filePath: Swift.String, imageProvider: (any ICSdkEKYC.AnimationImageProvider)? = nil, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: ICSdkEKYC.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(url: Foundation.URL, imageProvider: (any ICSdkEKYC.AnimationImageProvider)? = nil, session: Foundation.URLSession = .shared, closure: @escaping ICSdkEKYC.LottieAnimationView.DownloadClosure, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: ICSdkEKYC.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(asset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, imageProvider: (any ICSdkEKYC.AnimationImageProvider)? = nil, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared, configuration: ICSdkEKYC.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieName name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationId: Swift.String? = nil, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: ICSdkEKYC.LottieConfiguration = .shared, completion: ((ICSdkEKYC.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieFilePath filePath: Swift.String, animationId: Swift.String? = nil, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: ICSdkEKYC.LottieConfiguration = .shared, completion: ((ICSdkEKYC.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieUrl url: Foundation.URL, animationId: Swift.String? = nil, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: ICSdkEKYC.LottieConfiguration = .shared, session: Foundation.URLSession = .shared, completion: ((ICSdkEKYC.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(dotLottieAsset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationId: Swift.String? = nil, dotLottieCache: (any ICSdkEKYC.DotLottieCacheProvider)? = DotLottieCache.sharedCache, configuration: ICSdkEKYC.LottieConfiguration = .shared, completion: ((ICSdkEKYC.LottieAnimationView, (any Swift.Error)?) -> Swift.Void)? = nil)
  public typealias DownloadClosure = ((any Swift.Error)?) -> Swift.Void
}
public typealias AnimationFrameTime = CoreFoundation.CGFloat
public typealias AnimationProgressTime = CoreFoundation.CGFloat
public enum LottieAnimationSource : Swift.Sendable {
  case lottieAnimation(ICSdkEKYC.LottieAnimation)
  case dotLottieFile(ICSdkEKYC.DotLottieFile)
}
extension ICSdkEKYC.LottieAnimation {
  final public var animationSource: ICSdkEKYC.LottieAnimationSource {
    get
  }
}
extension ICSdkEKYC.DotLottieFile {
  final public var animationSource: ICSdkEKYC.LottieAnimationSource {
    get
  }
}
@objc public class CompatibleAnimation : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, subdirectory: Swift.String? = nil, bundle: Foundation.Bundle = Bundle.main)
  @objc deinit
}
@objc public enum CompatibleRenderingEngineOption : Swift.Int {
  case shared
  case defaultEngine
  case automatic
  case mainThread
  case coreAnimation
  public static func generateLottieConfiguration(_ configuration: ICSdkEKYC.CompatibleRenderingEngineOption) -> ICSdkEKYC.LottieConfiguration
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CompatibleBackgroundBehavior : Swift.Int {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  case continuePlaying
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class CompatibleAnimationView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(compatibleAnimation: ICSdkEKYC.CompatibleAnimation)
  @objc @_Concurrency.MainActor @preconcurrency public init(compatibleAnimation: ICSdkEKYC.CompatibleAnimation, compatibleRenderingEngineOption: ICSdkEKYC.CompatibleRenderingEngineOption)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(url: Foundation.URL)
  @objc @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL, compatibleRenderingEngineOption: ICSdkEKYC.CompatibleRenderingEngineOption)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(data: Foundation.Data)
  @objc @_Concurrency.MainActor @preconcurrency public init(data: Foundation.Data, compatibleRenderingEngineOption: ICSdkEKYC.CompatibleRenderingEngineOption)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency public var compatibleAnimation: ICSdkEKYC.CompatibleAnimation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var loopAnimationCount: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var compatibleDictionaryTextProvider: ICSdkEKYC.CompatibleDictionaryTextProvider? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var shouldRasterizeWhenIdle: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var currentProgress: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var duration: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var currentTime: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var currentFrame: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var realtimeAnimationFrame: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var realtimeAnimationProgress: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var animationSpeed: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var respectAnimationFrameRate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isAnimationPlaying: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var backgroundMode: ICSdkEKYC.CompatibleBackgroundBehavior {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func play()
  @objc @_Concurrency.MainActor @preconcurrency public func play(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor @preconcurrency public func play(fromProgress: CoreFoundation.CGFloat, toProgress: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func play(fromFrame: CoreFoundation.CGFloat, toFrame: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func play(fromMarker: Swift.String, toMarker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func play(marker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func stop()
  @objc @_Concurrency.MainActor @preconcurrency public func pause()
  @objc @_Concurrency.MainActor @preconcurrency public func reloadImages()
  @objc @_Concurrency.MainActor @preconcurrency public func forceDisplayUpdate()
  @objc @_Concurrency.MainActor @preconcurrency public func getValue(for keypath: ICSdkEKYC.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> Any?
  @objc @_Concurrency.MainActor @preconcurrency public func logHierarchyKeypaths()
  @objc @_Concurrency.MainActor @preconcurrency public func setColorValue(_ color: UIKit.UIColor, forKeypath keypath: ICSdkEKYC.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor @preconcurrency public func getColorValue(for keypath: ICSdkEKYC.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public func addSubview(_ subview: ICSdkEKYC.AnimationSubview, forLayerAt keypath: ICSdkEKYC.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor @preconcurrency public func convert(rect: CoreFoundation.CGRect, toLayerAt keypath: ICSdkEKYC.CompatibleAnimationKeypath?) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor @preconcurrency public func convert(point: CoreFoundation.CGPoint, toLayerAt keypath: ICSdkEKYC.CompatibleAnimationKeypath?) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor @preconcurrency public func progressTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency public func frameTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency public func durationFrameTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc public class CompatibleDictionaryTextProvider : ObjectiveC.NSObject {
  @objc public init(values: [Swift.String : Swift.String])
  @objc deinit
}
public protocol AnimationFontProvider {
  func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
}
final public class DefaultFontProvider : ICSdkEKYC.AnimationFontProvider {
  public init()
  final public func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
  @objc deinit
}
extension ICSdkEKYC.DefaultFontProvider : Swift.Equatable {
  public static func == (_: ICSdkEKYC.DefaultFontProvider, _: ICSdkEKYC.DefaultFontProvider) -> Swift.Bool
}
final public class ColorValueProvider {
  public init(block: @escaping ICSdkEKYC.ColorValueProvider.ColorValueBlock)
  public init(_ color: ICSdkEKYC.LottieColor)
  public init(_ keyframes: [ICSdkEKYC.Keyframe<ICSdkEKYC.LottieColor>])
  public typealias ColorValueBlock = (CoreFoundation.CGFloat) -> ICSdkEKYC.LottieColor
  final public var color: ICSdkEKYC.LottieColor {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICSdkEKYC.ValueProviderStorage<ICSdkEKYC.LottieColor> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ICSdkEKYC.ColorValueProvider : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.ColorValueProvider, rhs: ICSdkEKYC.ColorValueProvider) -> Swift.Bool
}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
@_Concurrency.MainActor @preconcurrency public struct LottieView<Placeholder> where Placeholder : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(animation: ICSdkEKYC.LottieAnimation?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(dotLottieFile: ICSdkEKYC.DotLottieFile?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> ICSdkEKYC.LottieAnimation?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> ICSdkEKYC.LottieAnimation?, @SwiftUICore.ViewBuilder placeholder: @escaping (() -> Placeholder))
  @_Concurrency.MainActor @preconcurrency public init(_ loadDotLottieFile: @escaping () async throws -> ICSdkEKYC.DotLottieFile?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadDotLottieFile: @escaping () async throws -> ICSdkEKYC.DotLottieFile?, @SwiftUICore.ViewBuilder placeholder: @escaping (() -> Placeholder))
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> ICSdkEKYC.LottieAnimationSource?) where Placeholder == SwiftUICore.EmptyView
  @_Concurrency.MainActor @preconcurrency public init(_ loadAnimation: @escaping () async throws -> ICSdkEKYC.LottieAnimationSource?, @SwiftUICore.ViewBuilder placeholder: @escaping () -> Placeholder)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (ICSdkEKYC.LottieAnimationView) -> Swift.Void) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func resizable() -> ICSdkEKYC.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playing()", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play() -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func looping() -> ICSdkEKYC.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playing(_:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play(loopMode: ICSdkEKYC.LottieLoopMode = .playOnce) -> ICSdkEKYC.LottieView<Placeholder>
  @available(*, deprecated, renamed: "playbackMode(_:)", message: "Will be removed in a future major release.")
  @_Concurrency.MainActor @preconcurrency public func play(_ playbackMode: ICSdkEKYC.LottiePlaybackMode) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing(_ mode: ICSdkEKYC.LottiePlaybackMode.PlaybackMode) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing(loopMode: ICSdkEKYC.LottieLoopMode) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playing() -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func paused(at state: ICSdkEKYC.LottiePlaybackMode.PausedState = .currentFrame) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func playbackMode(_ playbackMode: ICSdkEKYC.LottiePlaybackMode) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func animationDidLoad(_ animationDidLoad: @escaping (ICSdkEKYC.LottieAnimationSource) -> Swift.Void) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func animationDidFinish(_ animationCompletionHandler: ICSdkEKYC.LottieCompletionBlock?) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func backgroundBehavior(_ value: ICSdkEKYC.LottieBackgroundBehavior) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func accessibilityLabel(_ accessibilityLabel: Swift.String?) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: ICSdkEKYC.LottieConfiguration) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func logger(_ logger: ICSdkEKYC.LottieLogger) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func imageProvider<ImageProvider>(_ imageProvider: ImageProvider) -> ICSdkEKYC.LottieView<Placeholder> where ImageProvider : ICSdkEKYC.AnimationImageProvider, ImageProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func textProvider<TextProvider>(_ textProvider: TextProvider) -> ICSdkEKYC.LottieView<Placeholder> where TextProvider : ICSdkEKYC.AnimationKeypathTextProvider, TextProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func fontProvider<FontProvider>(_ fontProvider: FontProvider) -> ICSdkEKYC.LottieView<Placeholder> where FontProvider : ICSdkEKYC.AnimationFontProvider, FontProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: ICSdkEKYC.AnimationKeypath) -> ICSdkEKYC.LottieView<Placeholder> where ValueProvider : ICSdkEKYC.AnyValueProvider, ValueProvider : Swift.Equatable
  @_Concurrency.MainActor @preconcurrency public func currentProgress(_ currentProgress: ICSdkEKYC.AnimationProgressTime?) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func currentFrame(_ currentFrame: ICSdkEKYC.AnimationFrameTime?) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func currentTime(_ currentTime: Foundation.TimeInterval?) -> ICSdkEKYC.LottieView<Placeholder>
  @_Concurrency.MainActor @preconcurrency public func reloadAnimationTrigger<Value>(_ value: Value, showPlaceholder: Swift.Bool = true) -> ICSdkEKYC.LottieView<Placeholder> where Value : Swift.Equatable
  @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
  @_Concurrency.MainActor @preconcurrency public func getRealtimeAnimationProgress(_ realtimeAnimationProgress: SwiftUICore.Binding<ICSdkEKYC.AnimationProgressTime>?) -> some SwiftUICore.View
  
  @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
  @_Concurrency.MainActor @preconcurrency public func getRealtimeAnimationFrame(_ realtimeAnimationFrame: SwiftUICore.Binding<ICSdkEKYC.AnimationProgressTime>?) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9ICSdkEKYC10LottieViewV4bodyQrvp", 0) __<Placeholder>
}
public protocol Interpolatable : ICSdkEKYC.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
public protocol SpatialInterpolatable : ICSdkEKYC.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
public protocol AnyInterpolatable {
  func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension ICSdkEKYC.Interpolatable {
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent _: CoreFoundation.CGPoint?, spatialInTangent _: CoreFoundation.CGPoint?) -> Self
}
extension ICSdkEKYC.SpatialInterpolatable {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension Swift.Double : ICSdkEKYC.Interpolatable {
}
extension CoreFoundation.CGFloat : ICSdkEKYC.Interpolatable {
}
extension Swift.Float : ICSdkEKYC.Interpolatable {
}
extension ICSdkEKYC.Interpolatable where Self : Swift.BinaryFloatingPoint {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
extension CoreFoundation.CGRect : ICSdkEKYC.Interpolatable {
  public func interpolate(to: CoreFoundation.CGRect, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
}
extension CoreFoundation.CGSize : ICSdkEKYC.Interpolatable {
  public func interpolate(to: CoreFoundation.CGSize, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
extension CoreFoundation.CGPoint : ICSdkEKYC.SpatialInterpolatable {
  public func interpolate(to: CoreFoundation.CGPoint, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> CoreFoundation.CGPoint
}
extension ICSdkEKYC.LottieColor : ICSdkEKYC.Interpolatable {
  public func interpolate(to: ICSdkEKYC.LottieColor, amount: CoreFoundation.CGFloat) -> ICSdkEKYC.LottieColor
}
extension ICSdkEKYC.LottieVector1D : ICSdkEKYC.Interpolatable {
  public func interpolate(to: ICSdkEKYC.LottieVector1D, amount: CoreFoundation.CGFloat) -> ICSdkEKYC.LottieVector1D
}
extension ICSdkEKYC.LottieVector2D : ICSdkEKYC.SpatialInterpolatable {
  public func interpolate(to: ICSdkEKYC.LottieVector2D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> ICSdkEKYC.LottieVector2D
}
extension ICSdkEKYC.LottieVector3D : ICSdkEKYC.SpatialInterpolatable {
  public func interpolate(to: ICSdkEKYC.LottieVector3D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> ICSdkEKYC.LottieVector3D
}
extension Swift.Array : ICSdkEKYC.Interpolatable, ICSdkEKYC.AnyInterpolatable where Element : ICSdkEKYC.Interpolatable {
  public func interpolate(to: [Element], amount: CoreFoundation.CGFloat) -> [Element]
}
public protocol AnimationKeypathTextProvider : AnyObject {
  func text(for keypath: ICSdkEKYC.AnimationKeypath, sourceText: Swift.String) -> Swift.String?
}
@available(*, deprecated, message: "`AnimationKeypathTextProvider` has been deprecated and renamed to `LegacyAnimationTextProvider`. Instead, conform to `AnimationKeypathTextProvider` instead or conform to `LegacyAnimationTextProvider` explicitly.")
public typealias AnimationTextProvider = ICSdkEKYC.LegacyAnimationTextProvider
public protocol LegacyAnimationTextProvider : ICSdkEKYC.AnimationKeypathTextProvider {
  func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
}
extension ICSdkEKYC.LegacyAnimationTextProvider {
  public func text(for _: ICSdkEKYC.AnimationKeypath, sourceText _: Swift.String) -> Swift.String?
}
final public class DictionaryTextProvider : ICSdkEKYC.AnimationKeypathTextProvider, ICSdkEKYC.LegacyAnimationTextProvider {
  public init(_ values: [Swift.String : Swift.String])
  final public func text(for keypath: ICSdkEKYC.AnimationKeypath, sourceText: Swift.String) -> Swift.String?
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
extension ICSdkEKYC.DictionaryTextProvider : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.DictionaryTextProvider, rhs: ICSdkEKYC.DictionaryTextProvider) -> Swift.Bool
}
final public class DefaultTextProvider : ICSdkEKYC.AnimationKeypathTextProvider, ICSdkEKYC.LegacyAnimationTextProvider {
  public init()
  final public func textFor(keypathName _: Swift.String, sourceText: Swift.String) -> Swift.String
  final public func text(for _: ICSdkEKYC.AnimationKeypath, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
extension ICSdkEKYC.DefaultTextProvider : Swift.Equatable {
  public static func == (_: ICSdkEKYC.DefaultTextProvider, _: ICSdkEKYC.DefaultTextProvider) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class AnimationSubview : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ICSdkEKYC.LottieColor : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class DotLottieFile {
  public struct Animation {
    public let animation: ICSdkEKYC.LottieAnimation
    public let configuration: ICSdkEKYC.DotLottieConfiguration
  }
  final public var animations: [ICSdkEKYC.DotLottieFile.Animation] {
    get
  }
  @objc deinit
}
extension ICSdkEKYC.DotLottieFile : @unchecked Swift.Sendable {
}
extension UIKit.UIImage {
  @objc dynamic public func addMetaData(path: Foundation.URL, make: Swift.String) -> Foundation.NSData?
  @objc dynamic public func addMetaData(data: Foundation.Data, make: Swift.String) -> Foundation.NSData?
  @objc dynamic public func removeExifData(data: Foundation.NSData) -> Foundation.NSData
  @objc dynamic public func rotate(radians: Swift.Float) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  @objc dynamic public func readQRCode(completion: @escaping (Swift.String?) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class LottieAnimationViewBase : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageAsset : ICSdkEKYC.Asset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc final public class CompatibleAnimationKeypath : ObjectiveC.NSObject {
  @objc public init(keypath: Swift.String)
  @objc public init(keys: [Swift.String])
  final public let animationKeypath: ICSdkEKYC.AnimationKeypath
  @objc deinit
}
final public class PointValueProvider {
  public init(block: @escaping ICSdkEKYC.PointValueProvider.PointValueBlock)
  public init(_ point: CoreFoundation.CGPoint)
  public typealias PointValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  final public var point: CoreFoundation.CGPoint {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICSdkEKYC.ValueProviderStorage<ICSdkEKYC.LottieVector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ICSdkEKYC.PointValueProvider : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.PointValueProvider, rhs: ICSdkEKYC.PointValueProvider) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objcMembers public class ICEkycCrypto : ObjectiveC.NSObject {
  @objc public class func generateDigitRandomNumber(length: Swift.Int) -> Swift.String
  @objc public class func generateKeyWithRandomNamespace() -> Swift.String
  @objc public class func sha256Data(_ input: Swift.String) -> Foundation.Data
  @objc public class func sha256DataNonce(_ input: Swift.String) -> Foundation.Data
  @objc public class func pemToDer(_ pem: Swift.String) -> Foundation.Data?
  @objc public class func loadPublicKey(from derData: Foundation.Data) -> Security.SecKey?
  @objc public class func loadPrivateKey(from derData: Foundation.Data) -> Security.SecKey?
  @objc public class func encryptWithRSAOAEP(message: Foundation.Data, pemPublicKey: Swift.String) -> Foundation.Data?
  @objc public class func decryptWithRSAOAEP(cipherText: Foundation.Data, pemPrivateKey: Swift.String) -> Foundation.Data?
  @objc public class func encryptChaCha20Poly1305(plaintext: Swift.String, keyData: Foundation.Data, nonceData: Foundation.Data) -> Swift.String?
  @objc public class func decryptChaCha20Poly1305(encryptedData: Swift.String, key: Foundation.Data, nonce: Foundation.Data) -> Swift.String?
  @objc public class func encryptAESGcm(data: Foundation.Data, keyHex: Swift.String) -> Foundation.Data?
  @objc public class func decryptAESGcm(encryptedData: Foundation.Data, keyHex: Swift.String) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
@available(*, deprecated, message: "Use DefaultAnimationCache instead, which is thread-safe and automatically responds to memory pressure.")
public typealias LRUAnimationCache = ICSdkEKYC.DefaultAnimationCache
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
@_Concurrency.MainActor @preconcurrency public struct LottieSwitch {
  @_Concurrency.MainActor @preconcurrency public init(animation: ICSdkEKYC.LottieAnimation?)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func configure(_ configure: @escaping (ICSdkEKYC.AnimatedSwitch) -> Swift.Void) -> ICSdkEKYC.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func configuration(_ configuration: ICSdkEKYC.LottieConfiguration) -> ICSdkEKYC.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func isOn(_ binding: SwiftUICore.Binding<Swift.Bool>) -> ICSdkEKYC.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func onAnimation(fromProgress onStartProgress: ICSdkEKYC.AnimationProgressTime, toProgress onEndProgress: ICSdkEKYC.AnimationProgressTime) -> ICSdkEKYC.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func offAnimation(fromProgress offStartProgress: ICSdkEKYC.AnimationProgressTime, toProgress offEndProgress: ICSdkEKYC.AnimationProgressTime) -> ICSdkEKYC.LottieSwitch
  @_Concurrency.MainActor @preconcurrency public func valueProvider<ValueProvider>(_ valueProvider: ValueProvider, for keypath: ICSdkEKYC.AnimationKeypath) -> ICSdkEKYC.LottieSwitch where ValueProvider : ICSdkEKYC.AnyValueProvider, ValueProvider : Swift.Equatable
  @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9ICSdkEKYC12LottieSwitchV4bodyQrvp", 0) __
}
@_inheritsConvenienceInitializers @objc public class EmulatorChecker : ObjectiveC.NSObject {
  @objc public static func amIRunInEmulator() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LottieAnimationLayer : QuartzCore.CALayer {
  public init(animation: ICSdkEKYC.LottieAnimation?, imageProvider: (any ICSdkEKYC.AnimationImageProvider)? = nil, textProvider: any ICSdkEKYC.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any ICSdkEKYC.AnimationFontProvider = DefaultFontProvider(), configuration: ICSdkEKYC.LottieConfiguration = .shared, logger: ICSdkEKYC.LottieLogger = .shared)
  public init(dotLottie: ICSdkEKYC.DotLottieFile?, animationId: Swift.String? = nil, textProvider: any ICSdkEKYC.AnimationKeypathTextProvider = DefaultTextProvider(), fontProvider: any ICSdkEKYC.AnimationFontProvider = DefaultFontProvider(), configuration: ICSdkEKYC.LottieConfiguration = .shared, logger: ICSdkEKYC.LottieLogger = .shared)
  public init(configuration: ICSdkEKYC.LottieConfiguration = .shared, logger: ICSdkEKYC.LottieLogger = .shared)
  open func play(completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  open func play(fromProgress: ICSdkEKYC.AnimationProgressTime? = nil, toProgress: ICSdkEKYC.AnimationProgressTime, loopMode: ICSdkEKYC.LottieLoopMode? = nil, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  open func play(fromFrame: ICSdkEKYC.AnimationFrameTime? = nil, toFrame: ICSdkEKYC.AnimationFrameTime, loopMode: ICSdkEKYC.LottieLoopMode? = nil, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  open func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, playEndMarkerFrame: Swift.Bool = true, loopMode: ICSdkEKYC.LottieLoopMode? = nil, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  open func play(marker: Swift.String, loopMode: ICSdkEKYC.LottieLoopMode? = nil, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  open func play(markers: [Swift.String], completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  open func stop()
  open func pause()
  open func pause(at state: ICSdkEKYC.LottiePlaybackMode.PausedState)
  @available(*, deprecated, renamed: "setPlaybackMode(_:completion:)", message: "Will be removed in a future major release.")
  open func play(_ playbackMode: ICSdkEKYC.LottiePlaybackMode, animationCompletionHandler: ICSdkEKYC.LottieCompletionBlock? = nil)
  open func setPlaybackMode(_ playbackMode: ICSdkEKYC.LottiePlaybackMode, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  open func play(_ playbackMode: ICSdkEKYC.LottiePlaybackMode.PlaybackMode, completion: ICSdkEKYC.LottieCompletionBlock? = nil)
  public var currentPlaybackMode: ICSdkEKYC.LottiePlaybackMode? {
    get
  }
  public var valueProviders: [ICSdkEKYC.AnimationKeypath : any ICSdkEKYC.AnyValueProvider] {
    get
  }
  public var animationLayerDidLoad: ((_ animationLayer: ICSdkEKYC.LottieAnimationLayer, _ renderingEngine: ICSdkEKYC.RenderingEngineOption) -> Swift.Void)?
  public var configuration: ICSdkEKYC.LottieConfiguration {
    get
    set
  }
  public var animationLayer: QuartzCore.CALayer? {
    get
  }
  public var screenScale: CoreFoundation.CGFloat {
    get
    set
  }
  public var backgroundBehavior: ICSdkEKYC.LottieBackgroundBehavior {
    get
    set
  }
  public var animation: ICSdkEKYC.LottieAnimation? {
    get
    set
  }
  public var animationLoaded: ((_ animationLayer: ICSdkEKYC.LottieAnimationLayer, _ animation: ICSdkEKYC.LottieAnimation) -> Swift.Void)? {
    get
    set
  }
  public var imageProvider: any ICSdkEKYC.AnimationImageProvider {
    get
    set
  }
  public var textProvider: any ICSdkEKYC.AnimationKeypathTextProvider {
    get
    set
  }
  public var fontProvider: any ICSdkEKYC.AnimationFontProvider {
    get
    set
  }
  public var maskAnimationToBounds: Swift.Bool {
    get
    set
  }
  public var isAnimationPlaying: Swift.Bool {
    get
  }
  public var loopMode: ICSdkEKYC.LottieLoopMode {
    get
    set
  }
  public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  public var currentProgress: ICSdkEKYC.AnimationProgressTime {
    get
    set
  }
  public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  public var currentFrame: ICSdkEKYC.AnimationFrameTime {
    get
    set
  }
  public var realtimeAnimationFrame: ICSdkEKYC.AnimationFrameTime {
    get
  }
  public var realtimeAnimationProgress: ICSdkEKYC.AnimationProgressTime {
    get
  }
  public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  public var currentRenderingEngine: ICSdkEKYC.RenderingEngine? {
    get
  }
  public var mainThreadRenderingEngineShouldForceDisplayUpdateOnEachFrame: Swift.Bool {
    get
    set
  }
  public func loadAnimation(_ animationId: Swift.String? = nil, from dotLottieFile: ICSdkEKYC.DotLottieFile)
  public func loadAnimation(atIndex index: Swift.Int, from dotLottieFile: ICSdkEKYC.DotLottieFile)
  public func reloadImages()
  public func forceDisplayUpdate()
  public func setValueProvider(_ valueProvider: any ICSdkEKYC.AnyValueProvider, keypath: ICSdkEKYC.AnimationKeypath)
  public func getValue(for keypath: ICSdkEKYC.AnimationKeypath, atFrame: ICSdkEKYC.AnimationFrameTime?) -> Any?
  public func getOriginalValue(for keypath: ICSdkEKYC.AnimationKeypath, atFrame: ICSdkEKYC.AnimationFrameTime?) -> Any?
  public func logHierarchyKeypaths()
  public func allHierarchyKeypaths() -> [Swift.String]
  public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: ICSdkEKYC.AnimationKeypath?) -> CoreFoundation.CGRect?
  public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: ICSdkEKYC.AnimationKeypath?) -> CoreFoundation.CGPoint?
  public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: ICSdkEKYC.AnimationKeypath)
  public func progressTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationProgressTime?
  public func frameTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationFrameTime?
  public func durationFrameTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationFrameTime?
  public func updateAnimationForBackgroundState()
  public func updateAnimationForForegroundState(wasWaitingToPlayAnimation: Swift.Bool)
  @objc deinit
}
extension ICSdkEKYC.LottieAnimation {
  public typealias DownloadClosure = (ICSdkEKYC.LottieAnimation?) -> Swift.Void
  final public var duration: Foundation.TimeInterval {
    get
  }
  final public var bounds: CoreFoundation.CGRect {
    get
  }
  final public var size: CoreFoundation.CGSize {
    get
  }
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared) -> ICSdkEKYC.LottieAnimation?
  public static func filepath(_ filepath: Swift.String, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared) -> ICSdkEKYC.LottieAnimation?
  public static func asset(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared) -> ICSdkEKYC.LottieAnimation?
  public static func from(data: Foundation.Data, strategy: ICSdkEKYC.DecodingStrategy = LottieConfiguration.shared.decodingStrategy) throws -> ICSdkEKYC.LottieAnimation
  @available(iOS 13.0, macOS 10.15, tvOS 13.0, *)
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared) async -> ICSdkEKYC.LottieAnimation?
  public static func loadedFrom(url: Foundation.URL, session: Foundation.URLSession = .shared, closure: @escaping ICSdkEKYC.LottieAnimation.DownloadClosure, animationCache: (any ICSdkEKYC.AnimationCacheProvider)? = LottieAnimationCache.shared)
  final public func progressTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationProgressTime?
  final public func frameTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationFrameTime?
  final public func durationFrameTime(forMarker named: Swift.String) -> ICSdkEKYC.AnimationFrameTime?
  final public func progressTime(forFrame frameTime: ICSdkEKYC.AnimationFrameTime, clamped: Swift.Bool = true) -> ICSdkEKYC.AnimationProgressTime
  final public func frameTime(forProgress progressTime: ICSdkEKYC.AnimationProgressTime) -> ICSdkEKYC.AnimationFrameTime
  final public func time(forFrame frameTime: ICSdkEKYC.AnimationFrameTime) -> Foundation.TimeInterval
  final public func frameTime(forTime time: Foundation.TimeInterval) -> ICSdkEKYC.AnimationFrameTime
}
extension Foundation.Bundle : @unchecked Swift.Sendable {
}
extension ICSdkEKYC.LottieVector1D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LottieVector2D : Swift.Codable, Swift.Hashable, Swift.Sendable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICSdkEKYC.LottieVector2D, b: ICSdkEKYC.LottieVector2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ICSdkEKYC.LottieVector3D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ICSdkEKYC.LottieVector3D {
  public var pointValue: CoreFoundation.CGPoint {
    get
  }
  public var sizeValue: CoreFoundation.CGSize {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class JailbreakChecker : ObjectiveC.NSObject {
  @objc public static func amIJailbroken() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
final public class FloatValueProvider {
  public init(block: @escaping ICSdkEKYC.FloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreFoundation.CGFloat)
  public typealias CGFloatValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  final public var float: CoreFoundation.CGFloat {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICSdkEKYC.ValueProviderStorage<ICSdkEKYC.LottieVector1D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ICSdkEKYC.FloatValueProvider : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.FloatValueProvider, rhs: ICSdkEKYC.FloatValueProvider) -> Swift.Bool
}
public enum DecodingStrategy : Swift.Hashable {
  case legacyCodable
  case dictionaryBased
  public static func == (a: ICSdkEKYC.DecodingStrategy, b: ICSdkEKYC.DecodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DotLottieConfiguration {
  public var id: Swift.String
  public var imageProvider: (any ICSdkEKYC.AnimationImageProvider)?
  public var loopMode: ICSdkEKYC.LottieLoopMode
  public var speed: Swift.Double
}
public protocol DotLottieCacheProvider {
  func file(forKey: Swift.String) -> ICSdkEKYC.DotLottieFile?
  func setFile(_ lottie: ICSdkEKYC.DotLottieFile, forKey: Swift.String)
  func clearCache()
}
public enum RenderingEngineOption : Swift.Hashable {
  case automatic
  case specific(ICSdkEKYC.RenderingEngine)
  public static var mainThread: ICSdkEKYC.RenderingEngineOption {
    get
  }
  public static var coreAnimation: ICSdkEKYC.RenderingEngineOption {
    get
  }
}
public enum RenderingEngine : Swift.Hashable {
  case mainThread
  case coreAnimation
}
extension ICSdkEKYC.RenderingEngineOption : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension ICSdkEKYC.RenderingEngine : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public typealias LottieControlType = UIKit.UIControl
public typealias LottieControlState = UIKit.UIControl.State
public typealias LottieControlEvent = UIKit.UIControl.Event
public class FilepathImageProvider : ICSdkEKYC.AnimationImageProvider {
  public init(filepath: Swift.String, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public init(filepath: Foundation.URL, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public func imageForAsset(asset: ICSdkEKYC.ImageAsset) -> CoreGraphics.CGImage?
  public func contentsGravity(for _: ICSdkEKYC.ImageAsset) -> QuartzCore.CALayerContentsGravity
  @objc deinit
}
extension ICSdkEKYC.FilepathImageProvider : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.FilepathImageProvider, rhs: ICSdkEKYC.FilepathImageProvider) -> Swift.Bool
}
public struct AnimationKeypath : Swift.Hashable, Swift.ExpressibleByStringLiteral {
  public init(keypath: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(keys: [Swift.String])
  public var keys: [Swift.String] {
    get
  }
  public var string: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICSdkEKYC.AnimationKeypath, b: ICSdkEKYC.AnimationKeypath) -> Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieVector1D : Swift.Hashable, Swift.Sendable {
  public init(_ value: Swift.Double)
  public let value: Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICSdkEKYC.LottieVector1D, b: ICSdkEKYC.LottieVector1D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LottieVector3D : Swift.Hashable, Swift.Sendable {
  public let x: Swift.Double
  public let y: Swift.Double
  public let z: Swift.Double
  public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICSdkEKYC.LottieVector3D, b: ICSdkEKYC.LottieVector3D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public class DotLottieCache : ICSdkEKYC.DotLottieCacheProvider {
  public init()
  public static let sharedCache: ICSdkEKYC.DotLottieCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public func clearCache()
  public func file(forKey key: Swift.String) -> ICSdkEKYC.DotLottieFile?
  public func setFile(_ lottie: ICSdkEKYC.DotLottieFile, forKey key: Swift.String)
  @objc deinit
}
extension Foundation.NSString {
  @objc dynamic public func toLowerCase() -> Swift.String
  @objc dynamic public func removeExtraSpaces() -> Swift.String
  @objc dynamic public func removeVietnameseDiacritics() -> Swift.String
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
public protocol AnyValueProvider {
  var valueType: any Any.Type { get }
  var typeErasedStorage: ICSdkEKYC.AnyValueProviderStorage { get }
  func hasUpdate(frame: ICSdkEKYC.AnimationFrameTime) -> Swift.Bool
}
extension ICSdkEKYC.AnyValueProvider {
  public func value(frame: ICSdkEKYC.AnimationFrameTime) -> Any
}
public enum ValueProviderStorage<T> where T : ICSdkEKYC.AnyInterpolatable {
  case singleValue(T)
  case keyframes([ICSdkEKYC.Keyframe<T>])
  case closure((ICSdkEKYC.AnimationFrameTime) -> T)
}
public enum AnyValueProviderStorage {
  case singleValue(Any)
  case keyframes([ICSdkEKYC.Keyframe<Any>], interpolate: (ICSdkEKYC.AnimationFrameTime) -> Any)
  case closure((ICSdkEKYC.AnimationFrameTime) -> Any)
}
public enum LayerType : Swift.Int, Swift.Codable {
  case precomp
  case solid
  case image
  case null
  case shape
  case text
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatteType : Swift.Int, Swift.Codable {
  case none
  case add
  case invert
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlendMode : Swift.Int, Swift.Codable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case hardLight
  case softLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ReducedMotionOption {
  case specific(ICSdkEKYC.ReducedMotionMode)
  case dynamic(any ICSdkEKYC.ReducedMotionOptionProvider, dataID: Swift.AnyHashable)
}
extension ICSdkEKYC.ReducedMotionOption {
  public static var standardMotion: ICSdkEKYC.ReducedMotionOption {
    get
  }
  public static var reducedMotion: ICSdkEKYC.ReducedMotionOption {
    get
  }
  public static var systemReducedMotionToggle: ICSdkEKYC.ReducedMotionOption {
    get
  }
}
extension ICSdkEKYC.ReducedMotionOption {
  public var currentReducedMotionMode: ICSdkEKYC.ReducedMotionMode {
    get
  }
}
extension ICSdkEKYC.ReducedMotionOption : Swift.Hashable {
  public static func == (lhs: ICSdkEKYC.ReducedMotionOption, rhs: ICSdkEKYC.ReducedMotionOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReducedMotionMode : Swift.Hashable {
  case standardMotion
  case reducedMotion
  public static func == (a: ICSdkEKYC.ReducedMotionMode, b: ICSdkEKYC.ReducedMotionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ReducedMotionOptionProvider {
  var currentReducedMotionMode: ICSdkEKYC.ReducedMotionMode { get }
}
public struct SystemReducedMotionOptionProvider : ICSdkEKYC.ReducedMotionOptionProvider {
  public init()
  public var currentReducedMotionMode: ICSdkEKYC.ReducedMotionMode {
    get
  }
}
public class DefaultAnimationCache : ICSdkEKYC.AnimationCacheProvider, @unchecked Swift.Sendable {
  public init()
  public static let sharedCache: ICSdkEKYC.DefaultAnimationCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public func clearCache()
  public func animation(forKey key: Swift.String) -> ICSdkEKYC.LottieAnimation?
  public func setAnimation(_ animation: ICSdkEKYC.LottieAnimation, forKey key: Swift.String)
  @objc deinit
}
public protocol AnimationImageProvider {
  var cacheEligible: Swift.Bool { get }
  func imageForAsset(asset: ICSdkEKYC.ImageAsset) -> CoreGraphics.CGImage?
  func contentsGravity(for asset: ICSdkEKYC.ImageAsset) -> QuartzCore.CALayerContentsGravity
}
extension ICSdkEKYC.AnimationImageProvider {
  public var cacheEligible: Swift.Bool {
    get
  }
  public func contentsGravity(for _: ICSdkEKYC.ImageAsset) -> QuartzCore.CALayerContentsGravity
}
@objc public enum ParallelMergeAlignment : Swift.Int {
  case vertical
  case horizontal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class DPVideoMatrix : ObjectiveC.NSObject {
  public init(rows: Swift.UInt, columns: Swift.UInt)
  @objc public func initWith(rows: Swift.UInt, columns: Swift.UInt)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class DPVideoMerger : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension ICSdkEKYC.DPVideoMerger {
  @objc dynamic open func mergeVideos(withFileURLs videoFileURLs: [Foundation.URL], videoResolution: CoreFoundation.CGSize = CGSize(width: -1, height: -1), videoQuality: Swift.String = AVAssetExportPresetMediumQuality, completion: @escaping (_ mergedVideoURL: Foundation.URL?, _ error: (any Swift.Error)?) -> Swift.Void)
  @objc dynamic open func gridMergeVideos(withFileURLs videoFileURLs: [Foundation.URL], matrix: ICSdkEKYC.DPVideoMatrix = DPVideoMatrix(rows: 2, columns: 2), audioFileURL: Foundation.URL? = nil, videoResolution: CoreFoundation.CGSize, isRepeatVideo: Swift.Bool = false, isRepeatAudio: Swift.Bool = false, isAudio: Swift.Bool = true, videoDuration: Swift.Int = -1, videoQuality: Swift.String = AVAssetExportPresetMediumQuality, completion: @escaping (_ mergedVideoURL: Foundation.URL?, _ error: (any Swift.Error)?) -> Swift.Void)
  @available(*, deprecated, message: "Use grid merge using matrix")
  @objc dynamic open func parallelMergeVideos(withFileURLs videoFileURLs: [Foundation.URL], audioFileURL: Foundation.URL? = nil, videoResolution: CoreFoundation.CGSize, isRepeatVideo: Swift.Bool = false, isRepeatAudio: Swift.Bool = false, videoDuration: Swift.Int = -1, videoQuality: Swift.String = AVAssetExportPresetMediumQuality, alignment: ICSdkEKYC.ParallelMergeAlignment = .vertical, completion: @escaping (_ mergedVideoURL: Foundation.URL?, _ error: (any Swift.Error)?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class Asset : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  final public let id: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ICSdkEKYC.Asset : @unchecked Swift.Sendable {
}
public enum CoordinateSpace : Swift.Int, Swift.Codable, Swift.Sendable {
  case type2d
  case type3d
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class LottieAnimation : Swift.Codable, Swift.Sendable {
  required public init(from decoder: any Swift.Decoder) throws
  public init(dictionary: [Swift.String : Any]) throws
  final public let startFrame: ICSdkEKYC.AnimationFrameTime
  final public let endFrame: ICSdkEKYC.AnimationFrameTime
  final public let framerate: Swift.Double
  final public var markerNames: [Swift.String] {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension QuartzCore.CALayer {
  @nonobjc public func logLayerTree(withIndent: Swift.Int = 0)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ICEkycConstant : ObjectiveC.NSObject {
  @objc public static let FontRegular: Swift.String
  @objc public static let FontMedium: Swift.String
  @objc public static let FontBold: Swift.String
  @objc public static let IsIpad: (Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
public class BundleImageProvider : ICSdkEKYC.AnimationImageProvider {
  public init(bundle: Foundation.Bundle, searchPath: Swift.String?, contentsGravity: QuartzCore.CALayerContentsGravity = .resize)
  public func imageForAsset(asset: ICSdkEKYC.ImageAsset) -> CoreGraphics.CGImage?
  public func contentsGravity(for _: ICSdkEKYC.ImageAsset) -> QuartzCore.CALayerContentsGravity
  @objc deinit
}
extension ICSdkEKYC.BundleImageProvider : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.BundleImageProvider, rhs: ICSdkEKYC.BundleImageProvider) -> Swift.Bool
}
@objc @_Concurrency.MainActor @preconcurrency open class AnimatedControl : ICSdkEKYC.LottieControlType {
  @_Concurrency.MainActor @preconcurrency public init(animation: ICSdkEKYC.LottieAnimation?, configuration: ICSdkEKYC.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency open func animationDidSet()
  @_Concurrency.MainActor @preconcurrency final public let animationView: ICSdkEKYC.LottieAnimationView
  @_Concurrency.MainActor @preconcurrency public var animation: ICSdkEKYC.LottieAnimation? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setLayer(named: Swift.String, forState: ICSdkEKYC.LottieControlState)
  @_Concurrency.MainActor @preconcurrency public func setValueProvider(_ valueProvider: any ICSdkEKYC.AnyValueProvider, keypath: ICSdkEKYC.AnimationKeypath)
  @objc deinit
}
public typealias LottieCompletionBlock = (_ completed: Swift.Bool) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AnimatedButton : ICSdkEKYC.AnimatedControl {
  @_Concurrency.MainActor @preconcurrency override public init(animation: ICSdkEKYC.LottieAnimation?, configuration: ICSdkEKYC.LottieConfiguration = .shared)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency public var performAction: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func setPlayRange(fromProgress: ICSdkEKYC.AnimationProgressTime, toProgress: ICSdkEKYC.AnimationProgressTime, event: ICSdkEKYC.LottieControlEvent)
  @_Concurrency.MainActor @preconcurrency public func setPlayRange(fromMarker fromName: Swift.String, toMarker toName: Swift.String, event: ICSdkEKYC.LottieControlEvent)
  @objc deinit
}
public enum DotLottieError : Swift.Error {
  case noDataLoaded
  case assetNotFound(name: Swift.String, bundle: Foundation.Bundle?)
  case loadingFromAssetNotSupported
  @available(*, deprecated, message: "Unused")
  case invalidFileFormat
  @available(*, deprecated, message: "Unused")
  case invalidData
  @available(*, deprecated, message: "Unused")
  case animationNotAvailable
}
final public class SizeValueProvider {
  public init(block: @escaping ICSdkEKYC.SizeValueProvider.SizeValueBlock)
  public init(_ size: CoreFoundation.CGSize)
  public typealias SizeValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  final public var size: CoreFoundation.CGSize {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICSdkEKYC.ValueProviderStorage<ICSdkEKYC.LottieVector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ICSdkEKYC.SizeValueProvider : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.SizeValueProvider, rhs: ICSdkEKYC.SizeValueProvider) -> Swift.Bool
}
final public class GradientValueProvider {
  public init(block: @escaping ICSdkEKYC.GradientValueProvider.ColorsValueBlock, locations: ICSdkEKYC.GradientValueProvider.ColorLocationsBlock? = nil)
  public init(_ colors: [ICSdkEKYC.LottieColor], locations: [Swift.Double] = [])
  public typealias ColorsValueBlock = (CoreFoundation.CGFloat) -> [ICSdkEKYC.LottieColor]
  public typealias ColorLocationsBlock = (CoreFoundation.CGFloat) -> [Swift.Double]
  final public var colors: [ICSdkEKYC.LottieColor] {
    get
    set
  }
  final public var locations: [Swift.Double] {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICSdkEKYC.ValueProviderStorage<[Swift.Double]> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ICSdkEKYC.GradientValueProvider : Swift.Equatable {
  public static func == (lhs: ICSdkEKYC.GradientValueProvider, rhs: ICSdkEKYC.GradientValueProvider) -> Swift.Bool
}
public typealias FailedCheckType = (check: ICSdkEKYC.FailedCheck, failMessage: Swift.String)
public enum FailedCheck : Swift.CaseIterable {
  case urlSchemes
  case existenceOfSuspiciousFiles
  case suspiciousFilesCanBeOpened
  case restrictedDirectoriesWriteable
  case fork
  case symbolicLinks
  case dyld
  case openedPorts
  case pSelectFlag
  case suspiciousObjCClasses
  public static func == (a: ICSdkEKYC.FailedCheck, b: ICSdkEKYC.FailedCheck) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ICSdkEKYC.FailedCheck]
  nonisolated public static var allCases: [ICSdkEKYC.FailedCheck] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UITapGestureRecognizer {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func didTapGestureRecognizerAttributedTextInLabel(label: UIKit.UILabel, inRange targetRange: Foundation.NSRange) -> Swift.Bool
}
public struct LottieConfiguration : Swift.Hashable {
  public init(renderingEngine: ICSdkEKYC.RenderingEngineOption = .automatic, decodingStrategy: ICSdkEKYC.DecodingStrategy = .dictionaryBased, colorSpace: CoreGraphics.CGColorSpace = CGColorSpaceCreateDeviceRGB(), reducedMotionOption: ICSdkEKYC.ReducedMotionOption = .systemReducedMotionToggle)
  public static var shared: ICSdkEKYC.LottieConfiguration
  public var renderingEngine: ICSdkEKYC.RenderingEngineOption
  public var decodingStrategy: ICSdkEKYC.DecodingStrategy
  public var reducedMotionOption: ICSdkEKYC.ReducedMotionOption
  public var colorSpace: CoreGraphics.CGColorSpace
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICSdkEKYC.LottieConfiguration, b: ICSdkEKYC.LottieConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnimationCacheProvider : AnyObject, Swift.Sendable {
  func animation(forKey: Swift.String) -> ICSdkEKYC.LottieAnimation?
  func setAnimation(_ animation: ICSdkEKYC.LottieAnimation, forKey: Swift.String)
  func clearCache()
}
@available(iOS 13.0, tvOS 13.0, *)
@_Concurrency.MainActor @preconcurrency open class EpoxySwiftUIHostingController<Content> : SwiftUI.UIHostingController<Content> where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency override public init(rootView: Content)
  @_Concurrency.MainActor @preconcurrency override public init?(coder aDecoder: Foundation.NSCoder, rootView: Content)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension ICSdkEKYC.AnimatedSwitch.CancelBehavior : Swift.Equatable {}
extension ICSdkEKYC.AnimatedSwitch.CancelBehavior : Swift.Hashable {}
extension ICSdkEKYC.LottieBackgroundBehavior : Swift.Equatable {}
extension ICSdkEKYC.LottieBackgroundBehavior : Swift.Hashable {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension ICSdkEKYC.LottieButton : SwiftUICore.View {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension ICSdkEKYC.LottieButton : Swift.Sendable {}
extension ICSdkEKYC.CompatibleRenderingEngineOption : Swift.Equatable {}
extension ICSdkEKYC.CompatibleRenderingEngineOption : Swift.Hashable {}
extension ICSdkEKYC.CompatibleRenderingEngineOption : Swift.RawRepresentable {}
extension ICSdkEKYC.CompatibleBackgroundBehavior : Swift.Equatable {}
extension ICSdkEKYC.CompatibleBackgroundBehavior : Swift.Hashable {}
extension ICSdkEKYC.CompatibleBackgroundBehavior : Swift.RawRepresentable {}
extension ICSdkEKYC.ColorValueProvider : ICSdkEKYC.AnyValueProvider {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension ICSdkEKYC.LottieView : SwiftUICore.View {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension ICSdkEKYC.LottieView : Swift.Sendable {}
extension ICSdkEKYC.PointValueProvider : ICSdkEKYC.AnyValueProvider {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension ICSdkEKYC.LottieSwitch : SwiftUICore.View {}
@available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
extension ICSdkEKYC.LottieSwitch : Swift.Sendable {}
extension ICSdkEKYC.FloatValueProvider : ICSdkEKYC.AnyValueProvider {}
extension ICSdkEKYC.LayerType : Swift.Equatable {}
extension ICSdkEKYC.LayerType : Swift.Hashable {}
extension ICSdkEKYC.LayerType : Swift.RawRepresentable {}
extension ICSdkEKYC.MatteType : Swift.Equatable {}
extension ICSdkEKYC.MatteType : Swift.Hashable {}
extension ICSdkEKYC.MatteType : Swift.RawRepresentable {}
extension ICSdkEKYC.BlendMode : Swift.Equatable {}
extension ICSdkEKYC.BlendMode : Swift.Hashable {}
extension ICSdkEKYC.BlendMode : Swift.RawRepresentable {}
extension ICSdkEKYC.ParallelMergeAlignment : Swift.Equatable {}
extension ICSdkEKYC.ParallelMergeAlignment : Swift.Hashable {}
extension ICSdkEKYC.ParallelMergeAlignment : Swift.RawRepresentable {}
extension ICSdkEKYC.CoordinateSpace : Swift.Equatable {}
extension ICSdkEKYC.CoordinateSpace : Swift.Hashable {}
extension ICSdkEKYC.CoordinateSpace : Swift.RawRepresentable {}
extension ICSdkEKYC.SizeValueProvider : ICSdkEKYC.AnyValueProvider {}
extension ICSdkEKYC.GradientValueProvider : ICSdkEKYC.AnyValueProvider {}
extension ICSdkEKYC.FailedCheck : Swift.Equatable {}
extension ICSdkEKYC.FailedCheck : Swift.Hashable {}
